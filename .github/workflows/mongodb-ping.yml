name: MongoDB Ping

# Run every 4 days at midnight UTC to keep the database connection alive
on:
  schedule:
    - cron: '0 0 */4 * *'
  workflow_dispatch: # Allow manual triggering

jobs:
  ping-mongodb:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        
    - name: Install MongoDB driver
      run: npm install mongodb
      
    - name: Ping MongoDB
      run: |
        cat << 'EOF' > ping-mongodb.js
        const { MongoClient } = require('mongodb');
        
        async function pingMongoDB() {
          let client;
          
          try {
            console.log('🔌 Connecting to MongoDB...');
            
            // Use GitHub secret for MongoDB URI, fallback to env var for local testing
            const mongoUri = process.env.MONGODB_URI || process.env.MONGO_URI;
            
            if (!mongoUri) {
              throw new Error('MongoDB URI not found. Please set MONGODB_URI secret in GitHub.');
            }
            
            client = new MongoClient(mongoUri);
            await client.connect();
            
            console.log('✅ Connected to MongoDB successfully');
            
            // Get database instance
            const db = client.db();
            
            // Run ping command - this is a no-op that tests server responsiveness
            console.log('🏓 Sending ping command...');
            const result = await db.command({ ping: 1 });
            
            if (result.ok === 1) {
              console.log('✅ MongoDB ping successful!');
              console.log('📊 Response:', JSON.stringify(result, null, 2));
              
              // Also get server status for additional health info
              const serverStatus = await db.command({ 
                serverStatus: 1,
                connections: 1,
                network: 1 
              });
              
              console.log('🔗 Current connections:', serverStatus.connections?.current || 'N/A');
              console.log('📡 Network bytes in:', serverStatus.network?.bytesIn || 'N/A');
              console.log('📡 Network bytes out:', serverStatus.network?.bytesOut || 'N/A');
              
            } else {
              throw new Error('MongoDB ping returned non-OK status');
            }
            
          } catch (error) {
            console.error('❌ MongoDB ping failed:', error.message);
            
            if (error.code) {
              console.error('🔧 Error code:', error.code);
            }
            
            if (error.cause) {
              console.error('🔍 Root cause:', error.cause.message);
            }
            
            process.exit(1);
            
          } finally {
            if (client) {
              try {
                await client.close();
                console.log('🔌 MongoDB connection closed');
              } catch (closeError) {
                console.error('⚠️  Error closing connection:', closeError.message);
              }
            }
          }
        }
        
        // Run the ping function
        pingMongoDB().then(() => {
          console.log('🎉 MongoDB ping workflow completed successfully');
        }).catch((error) => {
          console.error('💥 Workflow failed:', error.message);
          process.exit(1);
        });
        EOF
        
        node ping-mongodb.js
      env:
        MONGODB_URI: ${{ secrets.MONGODB_URI }}
        
    - name: Cleanup
      if: always()
      run: rm -f ping-mongodb.js
